% Numerical computation of the kinematics and dynamics of a modified
% three-link UR5e robot. In this version, the final joint (the first wrist
% joint) is not allowed to rotate (i.e., there is no q_4).
%
% Nosa Edoimioya
% 01/25/2024

close all
clear all
clc

% Declare symbols
syms g q_1 q_2 q_3 q_4...
    dq_1 dq_2 dq_3 dq_4
%% DH and Inertia Parameters of UR5e - make sure all joint angles start from 0 rad
alpha = [0,pi/2,0,0]; %[rad]
a = [0,0,-0.425,-0.3922]; %[m]
d = [0.1625,0,0,0.1333]; %[m]
m = [3.761,8.058,2.846,1.37+1.3+0.365]; %[kg]

p_c1 = [0,-25.61,1.93]*10^(-3); %[m]
p_c2 = [-212.5,0,113.36]*10^(-3);
p_c3 = [-119,0,26.5]*10^(-3);
p_c4 = [0,16.34,-1.8]*10^(-3);

In_1 = [84,0,0;0,64,0;0,0,84]*10^(-4); % these are not measured
In_2 = [78,0,0;0,21,0;0,0,21]*10^(-4);
In_3 = [16,0,0;0,462,0;0,0,462]*10^(-4);
In_4 = [32,0,0;0,32,0;0,0,18]*10^(-4);
%% OTHER PARAMETERs AND SYMBOLs
alpha_0=alpha(1);alpha_1=alpha(2);alpha_2=alpha(3);alpha_3=alpha(4);
a_0=a(1);a_1=a(2);a_2=a(3);a_3=a(4);
d_1=d(1);d_2=d(2);d_3=d(3);d_4=d(4);

p_cx1=p_c1(1);p_cy1=p_c1(2);p_cz1=p_c1(3);
p_cx2=p_c2(1);p_cy2=p_c2(2);p_cz2=p_c2(3);
p_cx3=p_c3(1);p_cy3=p_c3(2);p_cz3=p_c3(3);
p_cx4=p_c4(1);p_cy4=p_c4(2);p_cz4=p_c4(3);

m_1=m(1);m_2=m(2);m_3=m(3);m_4=m(4);

%% ROTATION MATRICEs
R_1=[cos(q_1) -sin(q_1) 0;
     sin(q_1)*cos(alpha_0) cos(q_1)*cos(alpha_0) -sin(alpha_0);
     sin(q_1)*sin(alpha_0) cos(q_1)*sin(alpha_0)  cos(alpha_0)];
R_2=[cos(q_2) -sin(q_2) 0;
     sin(q_2)*cos(alpha_1) cos(q_2)*cos(alpha_1) -sin(alpha_1);
     sin(q_2)*sin(alpha_1) cos(q_2)*sin(alpha_1)  cos(alpha_1)];
R_3=[cos(q_3) -sin(q_3) 0;
     sin(q_3)*cos(alpha_2) cos(q_3)*cos(alpha_2) -sin(alpha_2);
     sin(q_3)*sin(alpha_2) cos(q_3)*sin(alpha_2)  cos(alpha_2)];
R_4=[cos(q_4) -sin(q_4) 0;
     sin(q_4)*cos(alpha_3) cos(q_4)*cos(alpha_3) -sin(alpha_3);
     sin(q_4)*sin(alpha_3) cos(q_4)*sin(alpha_3)  cos(alpha_3)];

%% POSITION VECTORs
p_1=[a_0;-sin(alpha_0)*d_1;cos(alpha_0)*d_1];
p_2=[a_1;-sin(alpha_1)*d_2;cos(alpha_1)*d_2];
p_3=[a_2;-sin(alpha_2)*d_3;cos(alpha_2)*d_3];
p_4=[a_3;-sin(alpha_3)*d_4;cos(alpha_3)*d_4];
%% TRANSLATION MATRICES AND FORWARD KINEMATICS
T_1 = [R_1,p_1;zeros(1,3),1];
T_2 = [R_2,p_2;zeros(1,3),1];
T_3 = [R_3,p_3;zeros(1,3),1];
T_4 = [R_4,p_4;zeros(1,3),1];
T = T_1*T_2*T_3*T_4;
T_41 = T_2*T_3*T_4;

% Save as computable Matlab function
matlabFunction(T,'File','threeLinkUr5e_40_transformation_matrix');
%% COMs' POSITION VECTORs
p_c1=p_1+R_1*[p_cx1;p_cy1;p_cz1];
p_c2=p_1+R_1*(p_2+R_2*[p_cx2;p_cy2;p_cz2]);
p_c3=p_1+R_1*(p_2+R_2*(p_3+R_3*[p_cx3;p_cy3;p_cz3]));
p_c4=p_1+R_1*(p_2+R_2*(p_3+R_3*(p_4+R_4*[p_cx4;p_cy4;p_cz4])));

%% SYSTEM's STATEs
q=[q_1;q_2;q_3;q_4];
n = length(q);
dq=[dq_1;dq_2;dq_3;dq_4];

%% LINEAR PART of JACOBIANs
J_v1=jacobian(p_c1,q);
J_v2=jacobian(p_c2,q);
J_v3=jacobian(p_c3,q);
J_v4=jacobian(p_c4,q);
%% ROTATION MATRICEs FROM BASE
R_20=R_1*R_2;
R_30=R_20*R_3;
R_40=R_30*R_4;
matlabFunction(R_40,'File','threeLinkUr5e_40_rotation_matrix');
%% ANGULAR PART of JACOBIANs
%o=zeros(3,4);
J_o1=[R_1(:,3),zeros(3,3)];
J_o2=[R_1(:,3),R_20(:,3),zeros(3,2)];
J_o3=[R_1(:,3),R_20(:,3),R_30(:,3),zeros(3,1)];
J_o4=[R_1(:,3),R_20(:,3),R_30(:,3),R_40(:,3)];
%% JACOBIAN MATRIX OF THE END-EFFECTOR
Jacobi = [J_v4;J_o3];
matlabFunction(Jacobi,'File','threeLinkUr5e_jacobian');
%% DERIVATIVE OF JACOBIAN MATRIX
q_diff = [diff(q_1,q_1),diff(q_2,q_2),diff(q_3,q_3)];
Jacobi_dot = subs(diff(Jacobi,q_1)*dq_1 + ...
                  diff(Jacobi,q_2)*dq_2 + ...
                  diff(Jacobi,q_3)*dq_3, q_diff, dq.');

matlabFunction(Jacobi_dot, 'File','threeLinkUr5e_jacobian_derivative');
%% ROBOT's INERTIA (MASS) MATRIX
M=J_v1.'*m_1*eye(3)*J_v1+J_o1.'*R_1*In_1*R_1.'*J_o1...
 +J_v2.'*m_2*eye(3)*J_v2+J_o2.'*R_20*In_2*R_20.'*J_o2...
 +J_v3.'*m_3*eye(3)*J_v3+J_o3.'*R_30*In_3*R_30.'*J_o3...
 +J_v4.'*m_4*eye(3)*J_v4+J_o3.'*R_40*In_4*R_40.'*J_o3;

matlabFunction(M,'File','threeLinkUr5e_inertia_matrix');
%%
% q_1 = 0;
% q_2 = -pi;
% q_3 = 0;
% double(subs(M))

%% SAVE AS MATLAB FUNCTION

% matlabFunction(R_40,'File','ur5e_R40_rotation_matrix');
% matlabFunction(T_41,'File','ur5e_T41_transformation_matrix');

%% CHRISTOFFEL SYMBOLS of the FIRST KIND
for i=1:n
    for j=1:n
        for k=1:n
            c(i,j,k) = diff(M(k,j),q(i,1))+diff(M(k,i),q(j,1))-diff(M(i,j),q(k,1));
        end
    end
end

%% SIMPLIFIED MATRICES using CHRISTOFFEL SYMBOLS
C = ones(n,n)*q_1;
for i=1:n
    for j=1:n
        C(j,i) = c(i,i,j);
    end
end

B = ones(n, n*(n-1)/2)*q_1;
Bm = [1,2;
      1,3;
      2,3];

for i=1:n
    for s=1:n*(n-1)/2
        k = Bm(s,1);
        j = Bm(s,2); 
        B(i,s) = c(j,k,i) + c(k,j,i);
    end
end

matlabFunction(C,'File','threeLinkUr5e_christoffel_diagonals');
matlabFunction(B,'File','threeLinkUr5e_christoffel_off_diagonals');

%% CORIOLIS and CENTRIFUGAL MATRIX
for k=1:n
   for s=1:n
      C(k,s)=.5*((diff(M(k,s),q_1)+diff(M(k,1),q(s,1))-diff(M(1,s),q(k,1)))*dq_1...
                +(diff(M(k,s),q_2)+diff(M(k,2),q(s,1))-diff(M(2,s),q(k,1)))*dq_2...
                +(diff(M(k,s),q_3)+diff(M(k,3),q(s,1))-diff(M(3,s),q(k,1)))*dq_3);
   end
end
matlabFunction(C,'File','threeLinkUr5e_coriolis_matrix');
%% POTENTIAL ENERGIES and GRAVITY VECTOR
P1=m_1*[0,0,g]*p_c1;
P2=m_2*[0,0,g]*p_c2;
P3=m_3*[0,0,g]*p_c3;
P4=m_4*[0,0,g]*p_c4;
P=P1+P2+P3+P4;
g_1=diff(P,q_1);
g_2=diff(P,q_2);
g_3=diff(P,q_3);
G=[g_1;g_2;g_3];

matlabFunction(G,'File','threeLinkUr5e_gravity_vector');
%% DYNAMICAL EQUATIONs of MOTION
% % % % %           M(q)*ddq + C(q,dq)dq + G(q) = u
% save ('threeLinkUr5e_num.mat','T','Jacobi','M','C','G');
% 
% fid = fopen('threeLinkUr5eT_num.txt', 'w');
% fwrite(fid, char(T), 'char');
% fclose(fid);
% 
% fid = fopen('threeLinkUr5eM_num.txt', 'w');
% fwrite(fid, char(M), 'char');
% fclose(fid);
% 
% fid = fopen('threeLinkUr5eC_num.txt', 'w');
% fwrite(fid, char(C), 'char');
% fclose(fid);
% 
% fid = fopen('threeLinkUr5eG_num.txt', 'w');
% fwrite(fid, char(G), 'char');
% fclose(fid);
% 
% fid = fopen('threeLinkUr5eJ_num.txt', 'w');
% fwrite(fid, char(Jacobi), 'char');
% fclose(fid);

clear 